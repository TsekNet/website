{"version":3,"file":"kv-storage-polyfill.umd.js","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/weak_map.js","../src/idb_utils.js","../src/async_iterator.js","../src/index.js","../src/cjs.js"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\nlet c = 0;\nexport default typeof WeakMap === 'function'\n  ? WeakMap\n  : function () {\n    const id = typeof Symbol === 'function' ? Symbol(0) : `__weak$${++c}`;\n    this.set = (key, val) => {\n      key[id] = val;\n    };\n    this.get = key => key[id];\n  };\n","/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\n// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/**\n * Allows a \"mutator\" function, which is simply a callback through which the success result will be passed.\n * This is important for iDB transactions in browsers withing native Promise support, where the transaction is closed before executing a promise chain.\n * @private\n */\nexport function promiseForRequest (request, mutator) {\n  return new Promise((resolve, reject) => {\n    request.onsuccess = () => {\n      let result = request.result;\n      if (mutator) result = mutator(result);\n      resolve(result);\n    };\n    request.onerror = () => {\n      reject(request.error);\n    };\n  });\n}\n\nexport function keyValuePairPromise (store, range) {\n  return promiseForRequest(\n    store.openCursor(range),\n    result => result ? [result.key, result.value] : []\n  );\n}\n\nexport function promiseForTransaction (transaction) {\n  return new Promise((resolve, reject) => {\n    transaction.oncomplete = () => {\n      resolve();\n    };\n    transaction.onabort = () => {\n      reject(transaction.error);\n    };\n    transaction.onerror = () => {\n      reject(transaction.error);\n    };\n  });\n}\n\nexport function throwForDisallowedKey (key) {\n  if (!isAllowedAsAKey(key)) {\n    throw Error('kv-storage: The given value is not allowed as a key');\n  }\n}\n\nexport const HASNT_STARTED_YET = {};\n\nexport function getNextKey (store, lastKey) {\n  const range = getRangeForKey(lastKey);\n  return keyValuePairPromise(store, range).then(ret => ret[0]);\n}\n\nexport function getNextKeyValuePair (store, lastKey) {\n  const range = getRangeForKey(lastKey);\n  return keyValuePairPromise(store, range);\n}\n\nfunction getRangeForKey (key) {\n  if (key === HASNT_STARTED_YET) {\n    // This is a stand-in for the spec's \"unbounded\" range, which isn't exposed\n    // to JS currently. If we ever get keys that sort below -Infinity, e.g. per\n    // https://github.com/w3c/IndexedDB/issues/76, then this needs to change.\n    // Alternately, if we add better primitives to IDB for getting the first\n    // key, per\n    // https://github.com/WICG/kv-storage/issues/6#issuecomment-452054944, then\n    // we could use those.\n    return IDBKeyRange.lowerBound(-Infinity);\n  }\n  return IDBKeyRange.lowerBound(key, true);\n}\n\nfunction isAllowedAsAKey (value) {\n  if (typeof value === 'number' || typeof value === 'string') {\n    return true;\n  }\n\n  if (typeof value === 'object' && value) {\n    if (Array.isArray(value)) {\n      return true;\n    }\n\n    if ('setUTCFullYear' in value) {\n      return true;\n    }\n\n    if (typeof ArrayBuffer === 'function' && ArrayBuffer.isView(value)) {\n      return true;\n    }\n\n    // isArrayBuffer\n    if ('byteLength' in value && 'length' in value) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\n// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport WeakMap from './weak_map.js';\nimport { getNextKey, getNextKeyValuePair, HASNT_STARTED_YET } from './idb_utils.js';\n\nconst _performDatabaseOperation = new WeakMap();\nconst _lastKey = new WeakMap(); // undefined = got to the end;\n// HASNT_STARTED_YET = not yet started\nconst _ongoingPromise = new WeakMap();\nconst _mode = new WeakMap();\n\n// @TODO this could be a function and we could use scope instead of weakmaps/properties\nclass StorageAreaAsyncIterator {\n  return () {\n    _lastKey.set(this, undefined);\n    // _performDatabaseOperation.set(iter, undefined);\n    // _ongoingPromise.set(iter, undefined);\n  }\n\n  next () {\n    const performDatabaseOperation = _performDatabaseOperation.get(this);\n    if (!performDatabaseOperation) {\n      return Promise.reject(new TypeError('Invalid this value'));\n    }\n\n    // We need to avoid multiple concurrent calls into the main logic of next(),\n    // which can happen if you manually manipulate the async iterator, i.e.\n    // `iter.next(); iter.next()` with no `await`s. This is because until we\n    // actually have the last key set correctly, such concurrent calls will use\n    // the wrong value for lastKey.\n\n    const currentOngoingPromise = _ongoingPromise.get(this);\n    let thisNextPromise;\n    if (currentOngoingPromise !== undefined) {\n      thisNextPromise = currentOngoingPromise.then(\n        () => getNextIterResult(this, performDatabaseOperation));\n    } else {\n      thisNextPromise = getNextIterResult(this, performDatabaseOperation);\n    }\n\n    _ongoingPromise.set(this, thisNextPromise);\n    return thisNextPromise;\n  }\n}\n\nif (typeof Symbol === 'function' && Symbol.asyncIterator) {\n  StorageAreaAsyncIterator.prototype[Symbol.asyncIterator] = function () {\n    return this;\n  };\n}\n\nfunction getNextIterResult (iter, performDatabaseOperation) {\n  return performDatabaseOperation(async (transaction, store) => {\n    const lastKey = _lastKey.get(iter);\n    if (lastKey === undefined) {\n      return { value: undefined, done: true };\n    }\n\n    const mode = _mode.get(iter);\n    let key;\n    let value;\n    let iterResultValue;\n    switch (mode) {\n    case 'keys': {\n      key = await getNextKey(store, lastKey);\n      iterResultValue = key;\n      break;\n    }\n    case 'values': {\n      [key, value] = await getNextKeyValuePair(store, lastKey);\n      iterResultValue = value;\n      break;\n    }\n    case 'entries': {\n      [key, value] = await getNextKeyValuePair(store, lastKey);\n      iterResultValue = key === undefined ? undefined : [key, value];\n      break;\n    }\n    }\n\n    _lastKey.set(iter, key);\n    _ongoingPromise.set(iter, undefined);\n\n    return { value: iterResultValue, done: key === undefined };\n  });\n}\n\nexport function createStorageAreaAsyncIterator (mode, performDatabaseOperation) {\n  const iter = new StorageAreaAsyncIterator();\n  _mode.set(iter, mode);\n  _performDatabaseOperation.set(iter, performDatabaseOperation);\n  _lastKey.set(iter, HASNT_STARTED_YET);\n  _ongoingPromise.set(iter, undefined);\n  return iter;\n}\n","/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\n// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport WeakMap from './weak_map.js';\nimport { createStorageAreaAsyncIterator } from './async_iterator.js';\nimport { promiseForRequest, promiseForTransaction, throwForDisallowedKey } from './idb_utils.js';\n\n// TODOs/spec-noncompliances:\n// - Susceptible to tampering of built-in prototypes and globals. We want to\n//   work on tooling to ameliorate that.\n\n// TODO: Use private fields when those ship.\n// In the meantime we use this hard-to-understand, but effective, pattern:\n// http://2ality.com/2016/01/private-data-classes.html#keeping-private-data-in-weakmaps\n// Of note, the weak map entries will live only as long as the corresponding StorageArea instances.\n//\n// Cheatsheet:\n// x.#y      <--->  _y.get(x)\n// x.#y = z  <--->  _y.set(x, z)\n\nconst _databaseName = new WeakMap();\nconst _databasePromise = new WeakMap();\n\nconst DEFAULT_STORAGE_AREA_NAME = 'default';\nconst DEFAULT_IDB_STORE_NAME = 'store';\n\nexport class StorageArea {\n  constructor (name) {\n    const database = `kv-storage:${name}`;\n    _databasePromise.set(this, null);\n    _databaseName.set(this, database);\n    // this._databasePromise = null;\n    // this._databaseName = database;\n\n    this.backingStore = {\n      database,\n      store: DEFAULT_IDB_STORE_NAME,\n      version: 1\n    };\n  }\n\n  async set (key, value) {\n    throwForDisallowedKey(key);\n\n    return performDatabaseOperation(this, 'readwrite', (transaction, store) => {\n      if (value === undefined) {\n        store.delete(key);\n      } else {\n        store.put(value, key);\n      }\n\n      return promiseForTransaction(transaction);\n    });\n  }\n\n  async get (key) {\n    throwForDisallowedKey(key);\n\n    return performDatabaseOperation(this, 'readonly', (transaction, store) => {\n      return promiseForRequest(store.get(key));\n    });\n  }\n\n  async delete (key) {\n    throwForDisallowedKey(key);\n\n    return performDatabaseOperation(this, 'readwrite', (transaction, store) => {\n      store.delete(key);\n      return promiseForTransaction(transaction);\n    });\n  }\n\n  async clear () {\n    // const databasePromise = this._databasePromise\n    const databasePromise = _databasePromise.get(this);\n    let db;\n    if (databasePromise !== null) {\n      // Don't try to delete, and clear the promise, while we're opening the database; wait for that\n      // first.\n      try {\n        db = await databasePromise;\n      } catch (e) {\n        // If the database failed to initialize, then that's fine, we'll still try to delete it.\n      }\n\n      // this._databasePromise = null;\n      _databasePromise.set(this, null);\n    }\n\n    // IE & Edge require closing before deleting, and a delay to sync.\n    if (db) {\n      try {\n        db.close();\n      } catch (e) {}\n      // return new Promise(setTimeout).then(() => this.clear()).then(() => new Promise(setTimeout));\n      // await Promise.resolve();\n      await new Promise(setTimeout);\n    }\n\n    // return promiseForRequest(self.indexedDB.deleteDatabase(this._databaseName));\n    return promiseForRequest(self.indexedDB.deleteDatabase(_databaseName.get(this)));\n  }\n\n  keys () {\n    return createStorageAreaAsyncIterator(\n      'keys', steps => performDatabaseOperation(this, 'readonly', steps));\n  }\n\n  values () {\n    return createStorageAreaAsyncIterator(\n      'values', steps => performDatabaseOperation(this, 'readonly', steps));\n  }\n\n  entries () {\n    return createStorageAreaAsyncIterator(\n      'entries', steps => performDatabaseOperation(this, 'readonly', steps));\n  }\n}\n\nif (typeof Symbol === 'function' && Symbol.asyncIterator) {\n  StorageArea.prototype[Symbol.asyncIterator] = StorageArea.prototype.entries;\n}\n\nexport default new StorageArea(DEFAULT_STORAGE_AREA_NAME);\n\nasync function performDatabaseOperation (area, mode, steps) {\n  // if (this._databasePromise === null) {\n  if (_databasePromise.get(area) === null) {\n    initializeDatabasePromise(area);\n  }\n\n  // const database = await this._databasePromise;\n  const database = await _databasePromise.get(area);\n  const transaction = database.transaction(DEFAULT_IDB_STORE_NAME, mode);\n  const store = transaction.objectStore(DEFAULT_IDB_STORE_NAME);\n\n  return steps(transaction, store);\n}\n\nfunction initializeDatabasePromise (area) {\n  const databaseName = _databaseName.get(area);\n  // const databaseName = this._databaseName;\n\n  // this._databasePromise = (\n  _databasePromise.set(area,\n    new Promise((resolve, reject) => {\n      const request = self.indexedDB.open(databaseName, 1);\n\n      request.onsuccess = () => {\n        const database = request.result;\n\n        if (!checkDatabaseSchema(database, databaseName, reject)) {\n          return;\n        }\n\n        database.onclose = () => {\n          _databasePromise.set(area, null);\n        };\n        database.onversionchange = () => {\n          database.close();\n          _databasePromise.set(area, null);\n        };\n        resolve(database);\n      };\n\n      request.onerror = () => reject(request.error);\n\n      request.onupgradeneeded = () => {\n        try {\n          request.result.createObjectStore(DEFAULT_IDB_STORE_NAME);\n        } catch (e) {\n          reject(e);\n        }\n      };\n    }));\n}\n\nfunction corrupted (databaseName) {\n  return new Error(`kv-storage: database \"${databaseName}\" corrupted`);\n}\n\nfunction checkDatabaseSchema (database, databaseName, reject) {\n  if (database.objectStoreNames.length !== 1) {\n    reject(corrupted(databaseName));\n    return false;\n  }\n\n  if (database.objectStoreNames[0] !== DEFAULT_IDB_STORE_NAME) {\n    reject(corrupted(databaseName));\n    return false;\n  }\n\n  const transaction = database.transaction(DEFAULT_IDB_STORE_NAME, 'readonly');\n  const store = transaction.objectStore(DEFAULT_IDB_STORE_NAME);\n\n  if (store.autoIncrement || store.keyPath || store.indexNames.length) {\n    reject(corrupted(databaseName));\n    return false;\n  }\n\n  return true;\n}\n","/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\n// Simplify CommonJS and UMD consumption by flattening exports.\nimport storage, { StorageArea } from './index.js';\nstorage.default = storage;\nstorage.StorageArea = StorageArea;\nexport default storage;\n"],"names":["_Pact","prototype","then","onFulfilled","onRejected","result","state","this","s","callback","_settle","v","e","o","_this","value","pact","bind","observer","Symbol","iterator","asyncIterator","let","c","WeakMap","id","set","key","val","get","promiseForRequest","request","mutator","Promise","resolve","reject","onsuccess","onerror","error","keyValuePairPromise","store","range","openCursor","promiseForTransaction","transaction","oncomplete","onabort","throwForDisallowedKey","Array","isArray","ArrayBuffer","isView","isAllowedAsAKey","Error","const","HASNT_STARTED_YET","getNextKeyValuePair","lastKey","getRangeForKey","IDBKeyRange","lowerBound","Infinity","_performDatabaseOperation","_lastKey","_ongoingPromise","_mode","StorageAreaAsyncIterator","getNextIterResult","iter","performDatabaseOperation","undefined","iterResultValue","done","discriminant","cases","awaitBody","dispatchIndex","outer","i","length","test","testValue","body","fallthroughCheck","_resumeAfterBody","_resumeAfterTest","ret","getNextKey","createStorageAreaAsyncIterator","mode","return","next","TypeError","thisNextPromise","currentOngoingPromise","area","steps","_databasePromise","databaseName","_databaseName","self","indexedDB","open","database","objectStoreNames","corrupted","DEFAULT_IDB_STORE_NAME","objectStore","autoIncrement","keyPath","indexNames","checkDatabaseSchema","onclose","onversionchange","close","onupgradeneeded","createObjectStore","initializeDatabasePromise","StorageArea","constructor","name","backingStore","version","delete","put","clear","deleteDatabase","db","setTimeout","databasePromise","recover","keys","values","entries","storage","default"],"mappings":"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"}